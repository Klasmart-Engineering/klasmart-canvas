import { PainterEventType } from './PainterEvent';
import { ICanvasObject } from '../../../interfaces/objects/canvas-object';
export interface IPainterController {
    on(event: PainterEventType, listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    removeListener(event: PainterEventType, listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    on(event: 'added', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    on(event: 'moved', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    on(event: 'rotated', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    on(event: 'scaled', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    on(event: 'skewed', listener: (id: string, target: ICanvasObject) => void): this;
    on(event: 'colorChanged', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    on(event: 'modified', listener: (id: string, target: ICanvasObject) => void): this;
    on(event: 'fontFamilyChanged', listener: (id: string, target: ICanvasObject) => void): this;
    on(event: 'removed', listener: (id: string, permission: boolean) => void): this;
    on(event: 'reconstruct', listener: (id: string, target: ICanvasObject) => void): this;
    on(event: 'moving', listener: (id: string, target: ICanvasObject) => void): this;
    on(event: 'setToolbarPermissions', listener: (id: string, target: ICanvasObject) => void): this;
    on(event: 'fontColorChanged', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    removeListener(event: 'added', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    removeListener(event: 'moved', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    removeListener(event: 'rotated', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    removeListener(event: 'scaled', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    removeListener(event: 'skewed', listener: (id: string, target: ICanvasObject) => void): this;
    removeListener(event: 'colorChanged', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    removeListener(event: 'modified', listener: (id: string, target: ICanvasObject) => void): this;
    removeListener(event: 'fontFamilyChanged', listener: (id: string, target: ICanvasObject) => void): this;
    removeListener(event: 'removed', listener: (id: string, permission: boolean) => void): this;
    removeListener(event: 'reconstruct', listener: (id: string, target: ICanvasObject) => void): this;
    removeListener(event: 'moving', listener: (id: string, target: ICanvasObject) => void): this;
    removeListener(event: 'setToolbarPermissions', listener: (id: string, target: ICanvasObject) => void): this;
    removeListener(event: 'fontColorChanged', listener: (id: string, objectType: string, target: ICanvasObject) => void): this;
    replayEvents(): Promise<void>;
}
