import { useCallback, useContext, useEffect, useMemo, useState } from 'react';
import { fabric } from 'fabric';
import eraseObjectCursor from '../../../assets/cursors/erase-object.png';
import { WhiteboardContext } from '../WhiteboardContext';
import { TypedShape } from '../../../interfaces/shapes/shapes';
import { isShape } from '../utils/shapes';
import {
  UNDO,
  REDO,
  SET,
  CanvasAction,
} from '../reducers/undo-redo';
import { ICanvasObject } from '../../../interfaces/objects/canvas-object';
import { ICanvasMouseEvent } from '../../../interfaces/canvas-events/canvas-mouse-event';
import { IWhiteboardContext } from '../../../interfaces/whiteboard-context/whiteboard-context';
import {
  ObjectEvent,
  ObjectType,
} from '../event-serializer/PaintEventSerializer';
import { IUndoRedoEvent } from '../../../interfaces/canvas-events/undo-redo-event';
import { ICanvasBrush } from '../../../interfaces/brushes/canvas-brush';
import { PartialErase } from '../partial-erase/partialErase';
import { useSynchronization } from '../canvas-features/useSynchronization';
import store from '../../whiteboard/redux/store';
import { getToolbarIsEnabled } from '../redux/utils';
import { IPermissions } from '../../../interfaces/permissions/permissions';
import { IBrushType } from '../../../interfaces/brushes/brush-type';
import { changeBrushTypeAction } from './feature-actions/changeBrushTypeAction';
import { useShapeSelector, useSpecialShapeSelector } from './shapeActions';
import { useMouseMove, useMouseUp } from './mouseActions';
import { mouseDownAction } from './mouseHandlers/mouseDown';
import { mouseUpAction } from './mouseHandlers/mouseUp';
import { mouseMoveAction } from './mouseHandlers/mouseMove';
import { useChangeStrokeColor } from './strokeColor';

export const useCanvasActions = (
  canvas: fabric.Canvas,
  dispatch: (action: CanvasAction) => void,
  canvasId: string,
  eventSerializer: any,
  userId: string
) => {
  const {
    shapeIsActive,
    updateFontColor,
    shape,
    shapeColor,
    updatePenColor,
    updateShapeColor,
    updateBrushType,
    closeModal,
    penColor,
    lineWidth,
    isLocalObject,
    updateClearIsActive,
    allToolbarIsEnabled,
    perfectShapeIsActive,
    partialEraseIsActive,
    eraseType,
    backgroundImage,
    localImage,
    brushType,
  } = useContext(WhiteboardContext) as IWhiteboardContext;

  const { changePenColorSync } = useSynchronization(userId as string);
  /**
   * Adds shape to whiteboard.
   * @param specific Indicates shape type that should be added in whiteboard.
   */
  const shapeSelector = useShapeSelector({ brushType, lineWidth, penColor, shape, shapeColor});

  /**
   * Adds shape with special brush to whiteboard.
   * @param {string} shape - Indicates shape type that should be added in whiteboard.
   * @param {IBrushType} brushType - Indicates brush type that sould be drawed the given shape.
   */
  const specialShapeSelector = useSpecialShapeSelector(userId as string);

  const mouseMove = useMouseMove();

  const mouseUp = useMouseUp(dispatch);

  const clearOnMouseEvent = useCallback((): void => {
    canvas?.off('mouse:down');
  }, [canvas]);

  /**
   * Clears all mouse event listeners from canvas.
   */
  const clearMouseEvents = useCallback((): void => {
    canvas?.off('mouse:move');
    canvas?.off('mouse:up');
  }, [canvas]);

  /**
   * Mouse down event listener for canvas.
   * @param shape Shape being added on canvas.
   * @param isCircle Indicates if shape is a circle.
   */
  const mouseDown = useCallback(
    (specific: string, color?: string): void => {
      canvas?.on('mouse:down', (e: fabric.IEvent): void => {
        console.log('mouse down...');
        if (e.target || !e.pointer) {
          return;
        }

        let shape;

        shape = shapeSelector(specific);

        if (e.pointer) {
          (shape as unknown as TypedShape).set({
            top: e.pointer.y,
            left: e.pointer.x,
            shapeType: 'shape',
            name: specific,
            strokeUniform: true,
          });
        }

        // fill and type properties just can be resetted if is an filled shape
        if (shape.fill !== 'transparent') {
          shape.set({
            shapeType: 'filledShape',
            fill: color || shapeColor,
          });
        }

        clearOnMouseEvent();
        mouseMove(shape, e.pointer, specific, canvas, brushType);
        mouseUp(shape, e.pointer, specific);
        canvas.add(shape);
      });
    },
    [canvas, clearOnMouseEvent, mouseMove, mouseUp, shapeColor, shapeSelector]
  );

  interface IShapeInProgress {
    shape: TypedShape;
    startPoint: fabric.Point;
  }

  /**
   * Used to save the current shape in case of an interruption
   * in its creation, generated by a state change in perfectShapeIsActive
   */
  const [
    shapeInProgress,
    setShapeInProgress,
  ] = useState<IShapeInProgress | null>();

  // const addShapeTemp = useAddShape(shapeIsActive, shapeInProgress, canvas, brushType, shapeSelector, specialShapeSelector, lineWidth);

  /**
   * Add specific shape to whiteboard
   * */
  const addShape = useCallback(
    (shapeToAdd: string) => {
      // Required to prevent multiple shapes add at once
      // if user clicked more than one shape during selection.
      if (!shapeIsActive) {
        return;
      }

      // If shape creation was interrupted by a change in perfectShapeIsActive
      if (shapeInProgress) {
        let startPoint = shapeInProgress.startPoint;
        store.dispatch({ type: 'SET_TRUE' });
        store.dispatch({ type: 'SET_START_POINT', payload: startPoint });
      }

      const activeObject = canvas?.getActiveObject();

      if (activeObject && isShape(activeObject)) {
        activeObject.set('evented', true);
      }

      canvas?.on('mouse:down', mouseDownAction(canvas, brushType, shapeSelector, shapeToAdd, specialShapeSelector, lineWidth, penColor));
      canvas?.on('mouse:move', mouseMoveAction(canvas, userId, perfectShapeIsActive, shapeToAdd, brushType, setShapeInProgress, eventSerializer));
      canvas?.on('mouse:up', mouseUpAction(canvas, userId, perfectShapeIsActive, shapeToAdd, brushType, lineWidth, penColor, setShapeInProgress, eventSerializer, dispatch));
    },
    /* If dataInProgress is added on dependencies
    the performance is bad and an unexpected behavior occurs */
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      shapeIsActive,
      canvas,
      perfectShapeIsActive,
      shapeSelector,
      userId,
      eventSerializer,
      dispatch,
    ]
  );

  /**
   * Changes the penColor value and if one or more objects are selected
   * also changes the stroke color in free drawing and empty shape objects
   * @param {string} color - new color to change
   */
  const changeStrokeColor = useChangeStrokeColor(canvas, userId, eventSerializer, updatePenColor, dispatch, changePenColorSync);

  const changeBrushType = useCallback(
    (type: IBrushType) => {
      changeBrushTypeAction(
        canvas as fabric.Canvas,
        userId as string,
        eventSerializer,
        updateBrushType,
        type
      );
    },
    [canvas, eventSerializer, updateBrushType, userId]
  );

  /**
   * Add specific color to selected shape
   * */
  const fillColor = useCallback(
    (color: string) => {
      updateShapeColor(color);
      clearOnMouseEvent();
      clearMouseEvents();
      mouseDown(shape, color);

      if (
        canvas?.getActiveObject() &&
        canvas.getActiveObject().fill !== 'transparent'
      ) {
        canvas.getActiveObject().set('fill', color);
        canvas.renderAll();

        // TODO: Handle Undo/Redo dispatch.
        dispatch({ type: SET, payload: canvas.getObjects() });
      }
    },
    [
      canvas,
      clearMouseEvents,
      clearOnMouseEvent,
      mouseDown,
      shape,
      updateShapeColor,
      dispatch,
    ]
  );

  /**
   * Add specific color to selected text or group of texts
   * @param {string} color - color to set
   */
  const textColor = useCallback(
    (color: string) => {
      updateFontColor(color);
      if (
        canvas?.getActiveObject() &&
        (canvas.getActiveObject() as fabric.IText).text
      ) {
        canvas.getActiveObject().set('fill', color);
        canvas.renderAll();

        const object: ICanvasObject = canvas?.getActiveObject();

        if (!(object as fabric.ITextOptions).isEditing) {
          const payload = {
            type: 'textbox',
            target: { fill: color },
            id: object.id,
          } as ObjectEvent;

          eventSerializer?.push('fontColorChanged', payload);

          const event = { event: payload, type: 'colorChanged' };

          dispatch({
            type: SET,
            payload: canvas?.getObjects() as TypedShape[],
            canvasId: userId,
            event: (event as unknown) as IUndoRedoEvent,
          });
        }
        return;
      }

      canvas?.getActiveObjects().forEach((obj: ICanvasObject) => {
        if (obj.id) {
          const type: ObjectType = obj.get('type') as ObjectType;
          if (type === 'textbox') {
            const target = (type: string) => {
              if (type === 'textbox') {
                return {
                  fill: color,
                };
              }
            };

            obj.set({
              fill: color,
            });

            const payload: ObjectEvent = {
              type,
              target: target(type) as ICanvasObject,
              id: obj.id,
            };

            eventSerializer?.push('fontColorChanged', payload);
          }
        }
      });
    },
    [updateFontColor, canvas, eventSerializer, dispatch, userId]
  );

  /**
   * Set the given visibility in all the controls in the given object.
   * @param {ICanvasObject} object - Object to set controls visibility.
   * @param {boolean} visibility - Visibility state.
   */
  const setObjectControlsVisibility = useCallback(
    (object: ICanvasObject, visibility: boolean) => {
      object.setControlsVisibility({
        bl: visibility,
        br: visibility,
        mb: visibility,
        ml: visibility,
        mr: visibility,
        mt: visibility,
        tl: visibility,
        tr: visibility,
        mtr: visibility,
      });
    },
    []
  );

  // Flood-fill Feature or maybe could be in CanvasActions.tsx
  /**
   * Reorder the current shapes letting the shapes over their container shape
   */
  const reorderShapes = useCallback(() => {
    let temporal;
    let actualIndex;
    let compareIndex;

    const getObjectIndex = (object: ICanvasObject, canvas: fabric.Canvas) => {
      return canvas.getObjects().indexOf(object);
    };

    canvas?.forEachObject((actual) => {
      canvas.forEachObject((compare) => {
        actualIndex = getObjectIndex(actual, canvas);
        compareIndex = getObjectIndex(compare, canvas);

        if (
          actual.isContainedWithinObject(compare) &&
          actualIndex < compareIndex
        ) {
          temporal = getObjectIndex(actual, canvas);
          actual.moveTo(compareIndex);
          compare.moveTo(temporal);
        }
      });
    });
  }, [canvas]);

  /**
   * Clears all whiteboard elements
   * */
  const clearWhiteboardClearAll = useCallback(async () => {
    await updateClearIsActive(true);
    await canvas?.getObjects().forEach((obj: ICanvasObject) => {
      if (obj.id) {
        obj.set({ groupClear: true });
        canvas?.remove(obj);
      }
    });

    const target = {
      target: {
        strategy: 'allowClearAll',
      },
    };

    eventSerializer?.push('removed', target as ObjectEvent);

    // Add cleared whiteboard to undo / redo state.
    const event = {
      event: { id: `${userId}:clearWhiteboard` },
      type: 'clearedWhiteboard',
    } as IUndoRedoEvent;

    // Add cleared whiteboard to undo / redo state.

    dispatch({
      type: SET,
      payload: canvas?.getObjects(),
      canvasId: userId,
      event,
    });

    await updateClearIsActive(false);
  }, [updateClearIsActive, canvas, dispatch, userId, eventSerializer]);

  /**
   * Clears all whiteboard elements
   * */
  const clearWhiteboardClearMySelf = useCallback(async () => {
    const toolbarIsEnabled = getToolbarIsEnabled();
    const serializerToolbarState = store.getState().permissionsState as IPermissions;
    const teacherHasPermission = allToolbarIsEnabled;
    const studentHasPermission =
      toolbarIsEnabled && serializerToolbarState.clearWhiteboard;
    if (teacherHasPermission || studentHasPermission) {
      if (typeof localImage === 'string' && localImage.length) {
        const target = {
          id: '',
          target: {
            strategy: 'allowClearMyself',
            isLocalImage: true,
          },
        };

        eventSerializer?.push('removed', target as ObjectEvent);
      }
      await updateClearIsActive(true);
      await canvas?.getObjects().forEach((obj: ICanvasObject) => {
        if (obj.id && isLocalObject(obj.id, userId)) {
          const target = {
            id: obj.id,
            target: {
              strategy: 'allowClearMyself',
            },
          };

          obj.set({ groupClear: true });
          canvas?.remove(obj);
          eventSerializer?.push('removed', target as ObjectEvent);
        }
      });

      if (canvas?.backgroundImage) {
        const target = {
          // @ts-ignore
          id: canvas.backgroundImage.id,
          target: {
            strategy: 'allowClearMyself',
            isBackgroundImage: true,
          },
        };

        eventSerializer?.push('removed', target as ObjectEvent);

        // In order to remove background you need to add 0 to the first argument.
        // An empty string unfortunately doesnt work.
        // https://stackoverflow.com/a/14171884
        // @ts-ignore
        canvas.setBackgroundImage(0, canvas.renderAll.bind(canvas));
      }

      closeModal();

      const event = {
        event: { id: `${userId}:clearWhiteboard` },
        type: 'clearedWhiteboard',
      } as IUndoRedoEvent;

      // Add cleared whiteboard to undo / redo state.
      dispatch({
        type: SET,
        payload: canvas?.getObjects(),
        canvasId: userId,
        event,
      });

      await updateClearIsActive(false);
    }
    // If isLocalObject is added in dependencies an infinity loop happens
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [
    canvas,
    closeModal,
    canvasId,
    eventSerializer,
    updateClearIsActive,
    allToolbarIsEnabled,
    dispatch,
    userId,
    localImage,
    backgroundImage,
  ]);

  /**
   * Clears all whiteboard with allowClearOthers strategy
   * */
  const clearWhiteboardAllowClearOthers = useCallback(
    async (userId: string) => {
      await updateClearIsActive(true);
      await canvas?.getObjects().forEach((obj: ICanvasObject) => {
        if (obj.id) {
          const object = obj.id.split(':');

          if (!object.length) {
            throw new Error('Invalid ID');
          }

          if (object[0] === userId) {
            canvas?.remove(obj);
          }

          const target = {
            id: obj.id,
            target: {
              strategy: 'allowClearOthers',
              userId,
            },
          };

          eventSerializer?.push('removed', target as ObjectEvent);
        }
      });
      await updateClearIsActive(false);
    },
    [canvas, eventSerializer, updateClearIsActive]
  );

  /**
   * Set Canvas Whiteboard selection ability
   * @param {boolean} selection - value to set in canvas and objects selection
   */
  const setCanvasSelection = useCallback(
    (selection: boolean) => {
      if (canvas) {
        canvas.selection = selection;
        canvas.renderAll();
      }
    },
    [canvas]
  );

  /**
   * Set the cursor to be showed when a object hover happens
   * @param {string} cursor - Cursor name to show
   */
  // eslint-disable-next-line react-hooks/exhaustive-deps
  const setHoverCursorObjects = useCallback(
    (cursor: string): void => {
      if (canvas) {
        canvas.forEachObject((object: fabric.Object) => {
          object.hoverCursor = cursor;
        });

        canvas.renderAll();
      }
    },
    [canvas]
  );

  /**
   * Creates the listeners to erase objects from the whiteboard
   */
  const eraseObject = useCallback(() => {
    let eraser: boolean = false;
    let activeObjects = canvas?.getActiveObjects();

    canvas?.getObjects().forEach((object: ICanvasObject) => {
      if (
        (object.id && isLocalObject(object.id, userId as string)) ||
        !object.id
      ) {
        object.set({
          evented: true,
          hoverCursor: `url("${eraseObjectCursor}"), auto`,
          lockMovementX: true,
          lockMovementY: true,
        });
      } else if (object.id) {
        object.set({
          hoverCursor: 'default',
        });
      }
    });

    if (activeObjects?.length && activeObjects.length > 1) {
      canvas?.getActiveObject().set({
        hoverCursor: `url("${eraseObjectCursor}"), auto`,
      });
    }

    // When mouse down eraser is able to remove objects
    canvas?.on('mouse:down', (e: ICanvasMouseEvent) => {
      if (eraser) {
        return false;
      }

      canvas.defaultCursor = `url("${eraseObjectCursor}"), auto`;
      eraser = true;

      // if the click is made over an object
      if (
        e.target &&
        (!e.target._objects ||
          (e.target._objects && (e.target as ICanvasBrush).basePath)) &&
        ((e.target.id && isLocalObject(e.target.id, userId as string)) ||
          !e.target.id)
      ) {
        canvas.remove(e.target);
        canvas.renderAll();
      }

      // if the click is made over an object group
      if (e.target?._objects) {
        e.target._objects.forEach(function (object: fabric.Object) {
          canvas.remove(object);
        });

        canvas.discardActiveObject();
        canvas.renderAll();
      }
    });

    // When mouse is over an object
    canvas?.on('mouse:over', (e: ICanvasMouseEvent) => {
      if (!eraser) {
        return false;
      }

      if (
        (e.target &&
          e.target.id &&
          isLocalObject(e.target.id, userId as string)) ||
        (e.target && !e.target.id)
      ) {
        canvas.remove(e.target);
        canvas.renderAll();
      }
    });

    // When mouse up eraser is unable to remove objects
    canvas?.on('mouse:up', () => {
      if (!eraser) {
        return false;
      }

      canvas.defaultCursor = 'default';
      eraser = false;
    });
    // If isLocalObject is added in dependencies an infinity loop happens
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [canvas, canvasId, userId]);

  useEffect(() => {
    if (!canvas) {
      return;
    }

    const toolbarIsEnabled = getToolbarIsEnabled(userId);
    const serializerToolbarState = store.getState().permissionsState as IPermissions;
    let eraser: any;

    if (
      eraseType === 'partial' &&
      canvas &&
      toolbarIsEnabled &&
      (allToolbarIsEnabled || serializerToolbarState.partialErase)
    ) {
      canvas?.discardActiveObject();
      canvas?.renderAll();

      eraser = new PartialErase(
        userId as string,
        canvas as fabric.Canvas,
        lineWidth,
        eraseObjectCursor,
        allToolbarIsEnabled,
        partialEraseIsActive,
        serializerToolbarState.partialErase,
        eventSerializer,
        dispatch
      );
      eraser.init();
    }

    if (
      eraseType === 'object' &&
      canvas &&
      toolbarIsEnabled &&
      (allToolbarIsEnabled || serializerToolbarState.erase)
    ) {
      eraseObject();

      if (canvas.getActiveObjects().length === 1) {
        canvas.discardActiveObject().renderAll();
      }
    }

    return () => {
      if (eraser) {
        eraser.destroy();
      }

      canvas?.off('mouse:up');
      canvas?.off('mouse:over');
      canvas?.off('path:created');
    };
  }, [
    canvas,
    eraseType,
    partialEraseIsActive,
    allToolbarIsEnabled,
    userId,
    lineWidth,
    eventSerializer,
    dispatch,
    eraseObject,
  ]);

  /**
   * Deselect the actual selected object
   */
  const discardActiveObject = useCallback(() => {
    canvas?.discardActiveObject().renderAll();
  }, [canvas]);

  const undo = useCallback(() => {
    const toolbarIsEnabled = getToolbarIsEnabled();
    const serializerToolbarState = store.getState().permissionsState as IPermissions;
    const teacherHasPermission = allToolbarIsEnabled;
    const studentHasPermission =
      toolbarIsEnabled && serializerToolbarState.undoRedo;

    if (teacherHasPermission || studentHasPermission) {
      dispatch({ type: UNDO, canvasId: canvasId });
    }
  }, [
    dispatch,
    canvasId,
    allToolbarIsEnabled,
  ]);

  const redo = useCallback(() => {
    const toolbarIsEnabled = getToolbarIsEnabled();
    const serializerToolbarState = store.getState().permissionsState as IPermissions;
    const teacherHasPermission = allToolbarIsEnabled;
    const studentHasPermission =
      toolbarIsEnabled && serializerToolbarState.undoRedo;

    if (teacherHasPermission || studentHasPermission) {
      dispatch({ type: REDO, canvasId: canvasId });
    }
  }, [
    dispatch,
    canvasId,
    allToolbarIsEnabled,
  ]);

  const state = useMemo(() => {
    const actions = {
      fillColor,
      changeStrokeColor,
      changeBrushType,
      textColor,
      clearWhiteboardClearAll,
      discardActiveObject,
      addShape,
      eraseObject,
      reorderShapes,
      setCanvasSelection,
      setHoverCursorObjects,
      setObjectControlsVisibility,
      undo,
      redo,
      clearWhiteboardAllowClearOthers,
      clearWhiteboardClearMySelf,
    };

    return { actions, mouseDown };
  }, [
    fillColor,
    changeStrokeColor,
    textColor,
    changeBrushType,
    clearWhiteboardClearAll,
    discardActiveObject,
    addShape,
    eraseObject,
    reorderShapes,
    setCanvasSelection,
    setHoverCursorObjects,
    setObjectControlsVisibility,
    undo,
    redo,
    clearWhiteboardAllowClearOthers,
    clearWhiteboardClearMySelf,
    mouseDown,
  ]);

  return state;
};
